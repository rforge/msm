Probability of passage (document clearly as different from pmatrix)

EFPT with time dependent covs?
support states as labels in efpt (and others?)

sojourn.msm with time dependent covs

Give informative error if initprobs not changed from default, but observed initial states that are not allowed by the HMM outcome model for state 1.

No point printing CIs for fixed parameters?

In extractor functions, warn that polynomial contrasts not supported,
only treatment contrasts. (factorcov2numeric.msm)
store in covdata whether model matrix built using treat/poly for factors



POSSIBLE MAJOR DEVELOPMENTS

Random effects models.  Could be done by translating a msm model to
corresponding JAGS or Stan code, inserting the random effects
then using MCMC for estimation.  HMMs would probably be better in
Stan.

Phase-type models.  Build appropriate parameter constraints in.

Time-inhomogeneous models with smoothly-varying intensities.  Product
integral method looks easy, e.g. for predictable covariates like age.
Alternatively, numerically integrate the Kolmogorov equations, as in
Titman (Biometrics 2011).  deSolve package could be used for this in C.
Difficult .Call type mechanism needed for using user-defined R functions
in C. See Writing R Extensions 5.11.1 for a possible starting point.
Or Rcpp.



SOME OTHER SUGGESTIONS: not all may be sensible.

Turnbull method to non-parametrically estimate time to interval-censored event.

Viterbi algorithm.  Probability of each hidden state at each time, instead of just most probable.
To compute this, need probabilities of all paths ending in state L at time ti: i.e. be sum_k instead of max_k in formula in Sec2.17 of PDF manual.

Bureau survival plots

Multiple realisations from same hidden trace, and/or multivariate HMM outcomes
cf. multiple multi-state processes with shared random effects?

Truncated observations.

.Call for passing data to C?  Rcpp package facilitates this.

Steady state probabilities

Use S_alloc instead of Calloc as in Viterbi - no need to free. Can't use on.exit to free on interrupt unless pointer declared globally.
